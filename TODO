
# The Plan for Now

- imitate Tomato firmware style/layout
- flask python web framework
- bootstrap with a non-standard color scheme

- modularize configuration "nuggets"; compare and apply changes all or none
- write nugget getters/setters
- use kernel/commands to fetch status info
- persist configuration changes to disk using python-augeas
- in some cases execute changes without restart?

- monitoring
    dmesg, syslog, auth
    ps aux
- front page status
    uptime
    current cpu, disk, ram utilization
    upstream: dhcp
    ip equivalent
    last login (?)
- about
    uname
    software versions
    project links
- administration
    hostname (?)
    ssh access, keys
    autocron updates
- WAN network
    static: ip, mask, gateway
    dhcp: nothing
    DNS servers
- LAN network
    dhcp: address block, lease length
- wireless
    enabled, transmit power, channel, SSID, wpa2 password
    torification
- tor
    generic status
    enable relay
    enable bridge
    common configuration

# Later

- dhcp configuration
- enable/disable hotplug in interfaces when method changes
- flesh out README
- installation script
- debian packaging
- admin authentication scheme
- not-root permissions scheme for: interfaces, tor, wireless, ssh keys
- firewall configuration
    port forwarding
    enable remote login
- historical bandwidth etc charts with mrtg
- realtime charts with http://www.flotcharts.org/ or similar
- i18n: http://packages.python.org/Flask-Babel/
- OONI
- only listen on local ethernet interface (enforce with firewall?)
